package ui.swing;

import data.AbstractMercuryReference;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import data.closure.GetFieldFunc;
import data.MercuryReference;
import data.FieldReference;
import data.closure.SetFieldFunc;

/**
 * A panel inside some {@code UIPanel} that displays and can be used to edit a field of {@code UIPanel} mercury data reference.
 * 
 * @author Pedro Mariano
 */
final public class InlinePanelField<D1, D2>
	extends DynamicDataPanel<InlinePanelField<D1, D2>, D2, AbstractMercuryReference<D2> >
	implements ComponentPopulate
{
	/**
	 * The {@code UIPanel} where this {@code InlinePanelField} is.
	 */
	final private UIPanel<D1> uipanel;
	
	InlinePanelField (AbstractMercuryReference<D2> data, UIFrame frame, UIPanel<D1> parentPanel, String panelName)
	{
		super (data, frame);
		this.uipanel = parentPanel;
		setBorder(javax.swing.BorderFactory.createTitledBorder (panelName));
//		this.initComponents ();
	}

	InlinePanelField (AbstractMercuryReference<D2> data, UIFrame frame, UIPanel<D1> parentPanel)
	{
		super (data, frame);
		this.uipanel = parentPanel;
	}

	@Override
	public void valueChanged (MercuryReference data)
	{
		for (ComponentPopulate cp : this.componentsPopulate) {
			cp.valueChanged (this.data);
		}
	}

	@Override
	public boolean commitValue ()
	{
		for (ComponentPopulate cp : this.componentsPopulate) {
			if (!cp.commitValue ()) {
				return false;
			}
		}
		return true;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
   }// </editor-fold>//GEN-END:initComponents
	
	
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables

	@Override
	public InlinePanelField handle_subdialog (JButton button, final UIPanel<D2> childPanel)
	{
		this.addDynamicComponent (button);
		ActionListener action;
		action = new ActionListener () {
			public void actionPerformed (ActionEvent evt)
			{
				childPanel.setData (InlinePanelField.this.data.getValue ());
				NavigateAction action = new NavigateAction (InlinePanelField.this.getUIPanel ().key)
				{
					public boolean perform ()
					{
						return InlinePanelField.this.setData (childPanel.data.getValue ());
					}
				};
				InlinePanelField.this.frame.showPanel (childPanel.key, action);
			}
		};
		button.addActionListener (action);
		return this;
		//throw new IllegalStateException ("InlinePanelField does not have buttons that open other panels");
	}

	@Override
	public <F> InlinePanelField handle_editField (JButton button, final Object[] getFunc, final Object[] setFunc, final UIPanel<F> childPanel)
	{
		this.addDynamicComponent (button);
		ActionListener action;
		action = new ActionListener () {
			GetFieldFunc<D2, F> getFieldFunc = new GetFieldFunc<> (getFunc);
			SetFieldFunc<D2, F> setFieldFunc = new SetFieldFunc<> (setFunc);
			@Override
			public void actionPerformed (java.awt.event.ActionEvent evt)
			{
//				childPanel.setData (applyGetFunc (getFunc));
				childPanel.setData (InlinePanelField.this.data.applyGetFieldFunc (getFieldFunc));
				NavigateAction action = new NavigateAction (InlinePanelField.this.getUIPanel ().key) {
					@Override
					public boolean perform ()
					{
//						boolean ok = applySetFunc (setFunc, childPanel.data.getValue ());
						boolean ok = InlinePanelField.this.data.applySetFieldFunc (setFieldFunc, childPanel.data.getValue ());
//						if (ok) {
//							InlinePanelField.this.setData (InlinePanelField.this.data.getValue ());
//						}
						return ok;
					}
				};
				InlinePanelField.this.frame.showPanel (childPanel.key, action);
			}
		};
		button.addActionListener (action);
		return this;
//		throw new IllegalStateException ("InlinePanelField does not have buttons that open other panels");
	}

	@Override
	UIPanel getUIPanel ()
	{
//		if (this.uipanel == null) {
//			throw new IllegalStateException ("Never reached");
//		}
//		else {
			return this.uipanel;
//		}
	}
	/*
	 *     System.out.print ("Changed from " + this.getPreferredSize ());
      this.setPreferredSize (new Dimension (
         this.getSize ().width,
         this.getSize ().height));
   System.out.println (" to " + this.getPreferredSize ());
	 */
}
