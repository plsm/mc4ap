/*
 * FieldListEditorPanel.java
 *
 * Created on 20 de Dezembro de 2013, 14:11
 */

package ui.swing;

import data.AbstractMercuryReference;


/**
 * An abstract component to display and edit a field list of {@code data}.
 * This class provides common functionality for components that have to
 * display and edit a field list of any type be it primitive or user
 * defined.
 *
 * @author  Pedro Mariano
 */
abstract class AbstractFieldListEditorPanel<D, F>
	extends AbstractFieldPanel<D, jmercury.list.List_1<F> >
{
//	/**
//	 * The get function used to get a list field of {@code data}.
//	 */
//	final private Object[] getFieldListFunc;
//	/**
//	 * The set function used to update a list field of {@code data}.
//	 */
//	final private Object[] setFieldListFunc;
	/**
	 * Function to obtain the field list size.
	 */
	final private Object[] listSizeFunc;
	/**
	 * Function that returns the {@code index} element of the field list.
	 */
	final private Object[] listElementFunc;
	
	/**
	 * Creates new form FieldListEditorPanel
	 */
	protected AbstractFieldListEditorPanel (AbstractMercuryReference<D> data, UIFrame frame, Object[] getFunc, Object[] setFunc, Object[] listSizeFunc, Object[] listElementFunc)
	{
		super (data, frame, getFunc, setFunc);
//		this.getFieldListFunc = getFunc;
//		this.setFieldListFunc = setFunc;
		this.listSizeFunc = listSizeFunc;
		this.listElementFunc = listElementFunc;
		initComponents ();
	}
//	/**
//	 * Get the field list value represented by this {@code
//	 * AbstractFieldListEditorPanel}.
//	 * 
//	 * @return the field list represented by this {@code AbstractFieldListEditorPanel}.
//	 */
//	protected jmercury.list.List_1<T> applyGetFunc ()
//	{
//		return (jmercury.list.List_1<T>) super.applyGetFunc (this.getFieldListFunc);
//	}
//	/**
//	 * Set the field list to the given value.
//	 * 
//	 * @param value The new value of the field list represented by this
//	 * {@code AbstractFieldListEditorPanel}.
//	 * 
//	 * @return Whether the new value is valid or not.
//	 */
//	protected boolean applySetFunc (jmercury.list.List_1<T> value)
//	{
//		return super.applySetFunc (this.setFieldListFunc, value);
//	}
	/**
	 * Get the number of elements in the field list.
	 * 
	 * @return 
	 */
	protected int applyListSizeFunc ()
	{
		if (this.data.getValue () == null) {
			//System.out.println ("AbstractFieldListEditorPanel.applyListSizeFunc(): invalid state");//DEBUG
			return 0;
		}
		jmercury.runtime.MethodPtr2 funcMeth = ((jmercury.runtime.MethodPtr2) listSizeFunc [1]);
		int result = (Integer) funcMeth.call___0_0 (listSizeFunc, this.data.getValue ());
		//System.out.println ("List has " + result + " elements");//DEBUG
		return result;
	}
	/**
	 * Return the element at the given index in the field list.  The index
	 * is zero-based.
	 * 
	 * @param index The index of element to return
	 * 
	 * @return The element at the given index in the field list.
	 */
	protected F applyListElementFunc (int index)
	{
		if (this.data.getValue () == null) {
			//System.out.println ("AbstractFieldListEditorPanel.applyListSizeFunc(): INVALID STATE");//DEBUG
			return null;
		}
		jmercury.runtime.MethodPtr3 funcMeth = ((jmercury.runtime.MethodPtr3) this.listElementFunc [1]);
		return (F) funcMeth.call___0_0 (listElementFunc, this.data.getValue (), new Integer (index));
		
	}

	protected boolean deleteElements (int[] selectedValues)
	{
		//jmercury.list.List_1<T> previousList = (jmercury.list.List_1<T>) this.applyGetFunc (this.getFunc).value;
		jmercury.list.List_1<F> previousList = this.data.getValue ();
		int i = 0, j = 0;
		jmercury.list.List_1<F> newList;
		newList = new jmercury.list.List_1.F_nil_0 ();
		jmercury.list.List_1.F_cons_2<F> insert, newInsert;
		insert = null;
		// build the new list of new items
		while (previousList instanceof jmercury.list.List_1.F_cons_2) {
			jmercury.list.List_1.F_cons_2<F> cons = (jmercury.list.List_1.F_cons_2) previousList;
			if (j < selectedValues.length && i == selectedValues [j]) {
				j++;
			}
			else {
				if (insert == null) {
					insert = new jmercury.list.List_1.F_cons_2<F> (cons.F1, null);
					newList = insert;
				}
				else {
					newInsert = new jmercury.list.List_1.F_cons_2<F> (cons.F1, null);
					insert.F2 = newInsert;
					insert = newInsert;
				}
			}
			previousList = cons.F2;
			i++;
		}
		if (insert != null) {
			// elements were inserted, so put nil constructor
			insert.F2 = new jmercury.list.List_1.F_nil_0 ();
		}
		// set the list field
		return this.data.setValue (newList);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      setBorder(javax.swing.BorderFactory.createEtchedBorder());
      setLayout(new java.awt.BorderLayout());
   }// </editor-fold>//GEN-END:initComponents
	
	
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
	
}
