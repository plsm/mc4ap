/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ui.swing;

import data.AbstractMercuryReference;
import data.MercuryReference;
import data.closure.SelectDataChoiceFunc;
import data.closure.SelectedDataChoiceFunc;

import jmercury.userInterface.SetResult_1;
import jmercury.maybe.Maybe_1;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JRadioButton;

/**
 * A panel that presents a set of radio buttons.
 * @author pedro
 */
final public class SelectOneOfDataPanel<D>
	extends AbstractSelectOneOfPanel<D, D>
{
	final private SelectedDataChoiceFunc<D> selectedChoiceFunc;
	/**
	 * 
	 * @param data
	 * @param frame
	 * @param parentPanel
	 * @param panelName
	 * @param funcSelectedChoice
	 * @param funcSetData 
	 */
	SelectOneOfDataPanel (AbstractMercuryReference<D> data, UIFrame frame, UIPanel<D> parentPanel, String panelName, Object[] funcSelectedChoice)
	{
		super (data, frame, parentPanel, panelName);
		this.selectedChoiceFunc = new SelectedDataChoiceFunc<> (funcSelectedChoice);
	}

	@Override
	public InlinePanelField<D, D> newInlinePanelForChoice ()
	{
		AbstractMercuryReference<D> amr = new AbstractMercuryReference<D> () {
			final int index = SelectOneOfDataPanel.this.numberRadioButtons;
			@Override
			public boolean handle_setResult (SetResult_1<D> mdata) {
				return SelectOneOfDataPanel.this.data.handle_setResult (mdata);
			}

			@Override
			public boolean setValue (D value)
			{
				return SelectOneOfDataPanel.this.data.setValue (value);
			}

			@Override
			public D getValue ()
			{
				Maybe_1<Integer > msc = SelectOneOfDataPanel.this.selectedChoiceFunc.apply (SelectOneOfDataPanel.this.data.getValue ());
				if (msc instanceof Maybe_1.Yes_1) {
					Maybe_1.Yes_1<Integer> yes = (Maybe_1.Yes_1<Integer>) msc;
					if (yes.F1 == index) {
						return SelectOneOfDataPanel.this.data.getValue ();
					}
					else {
						return null;
					}
				}
				else {
					return null;
				}
			}
		};
		InlinePanelField<D, D> result = new InlinePanelField<> (amr, this.frame, this.parentPanel);
		return result;
	}

	@Override
	public AbstractSelectOneOfPanel<D, D> handle_choiceItem (JRadioButton button, final Object[] selectChoiceFunc)
	{
		ButtonPanelInfo bpi = new ButtonPanelInfo (button);
		this.buttonPanelInfo.insertElementAt (bpi, this.numberRadioButtons);
		this.radioButtonsPanel.add (button);
		this.buttonGroup.add (button);
		button.addActionListener (new ActionListener () {
			int index = SelectOneOfDataPanel.this.numberRadioButtons++;
			SelectDataChoiceFunc<D> scf = new SelectDataChoiceFunc<> (selectChoiceFunc);
			@Override
			public void actionPerformed (ActionEvent e) {
				CardLayout cl = (CardLayout) (SelectOneOfDataPanel.this.dialogsPanel.getLayout ());
				cl.show (SelectOneOfDataPanel.this.dialogsPanel, EMPTY);
				SelectOneOfDataPanel.this.selectedInlinePanel = null;
				SetResult_1<D> object = scf.apply (SelectOneOfDataPanel.this.data.getValue (), index);
				if (SelectOneOfDataPanel.this.data.handle_setResult (object)) {
					
				}
				else {
					SelectOneOfDataPanel.this.buttonGroup.clearSelection ();
				}
			}
		});
		return this;
	}

	@Override
	public AbstractSelectOneOfPanel<D, D> handle_choiceItem (JRadioButton button, final Object[] selectChoiceFunc, final InlinePanelField<D, D> panel)
	{
		this.radioButtonsPanel.add (button);
		this.buttonGroup.add (button);
		final String key = AbstractSelectOneOfPanel.keyGenerator.nextKey ();
		ButtonPanelInfo bpi = new ButtonPanelInfo (button, panel, key);
		this.buttonPanelInfo.insertElementAt (bpi, this.numberRadioButtons);
		this.dialogsPanel.add (panel, key);
		button.addActionListener (new ActionListener () {
			int index = SelectOneOfDataPanel.this.numberRadioButtons++;
			SelectDataChoiceFunc<D> scf = new SelectDataChoiceFunc<> (selectChoiceFunc);
			@Override
			public void actionPerformed (ActionEvent e) {
				CardLayout cl = (CardLayout) (SelectOneOfDataPanel.this.dialogsPanel.getLayout ());
				SetResult_1<D> object = scf.apply (SelectOneOfDataPanel.this.data.getValue (), index);
				if (SelectOneOfDataPanel.this.data.handle_setResult (object)) {
					SetResult_1.Ok_1<D> ok = (SetResult_1.Ok_1<D>) object;
					panel.setData (ok.F1);
					cl.show (SelectOneOfDataPanel.this.dialogsPanel, key);
					SelectOneOfDataPanel.this.selectedInlinePanel = panel;
				}
				else {
					cl.show (SelectOneOfDataPanel.this.dialogsPanel, AbstractSelectOneOfPanel.EMPTY);
					SelectOneOfDataPanel.this.selectedInlinePanel = null;
				}
			}
		});
		return this;
	}
	    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
   }// </editor-fold>//GEN-END:initComponents


   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables

//	/**
//	 *
//	 * @param dummy
//	 */
//	@Override
//	public void valueChanged (MercuryReference<D> dummy)
//	{
//	}

	@Override
	public boolean commitValue ()
	{
		return this.selectedInlinePanel.commitValue ();
	}

	@Override
	public void valueChanged (MercuryReference<D> dummy)
	{
		Maybe_1<Integer> msc = this.selectedChoiceFunc.apply (this.data.getValue ());
		if (msc instanceof Maybe_1.Yes_1) {
			Maybe_1.Yes_1<Integer> yes = (Maybe_1.Yes_1<Integer>) msc;
			ButtonPanelInfo bpi = this.buttonPanelInfo.get (yes.F1);
			bpi.button.setSelected (true);
			CardLayout cl = (CardLayout) (this.dialogsPanel.getLayout ());
			if (bpi.panel != null) {
				bpi.panel.setData (this.data.getValue ());
				cl.show (this.dialogsPanel, bpi.key);
				this.selectedInlinePanel = bpi.panel;
			}
			else {
				cl.show (this.dialogsPanel, EMPTY);
				this.selectedInlinePanel = null;
			}
		}
		else {
			this.buttonGroup.clearSelection ();
			CardLayout cl = (CardLayout) (SelectOneOfDataPanel.this.dialogsPanel.getLayout ());
			cl.show (SelectOneOfDataPanel.this.dialogsPanel, EMPTY);
				this.selectedInlinePanel = null;
		}
	}
}
