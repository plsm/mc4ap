/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ui.swing;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.table.TableCellEditor;
import javax.swing.BorderFactory;
import javax.swing.event.ChangeEvent;
import javax.swing.event.EventListenerList;
import data.closure.SetFieldListElementFunc;
import javax.swing.table.TableCellRenderer;
import jmercury.userInterface.SetResult_1;
import ui.Key;

/**
 * Comoponent responsible for editing the elements of a field list.
 * 
 * @author Pedro Mariano
 */
public class FieldListCellRendererEditorPanel<D, F>
	extends DynamicDataPanel<FieldListCellRendererEditorPanel<D, F>, F, DataReference<F> >
	implements
		TableCellEditor,
		TableCellRenderer
{
	protected EventListenerList cellListenerList = new EventListenerList();
	/**
	 * 
	 */
	final private UIPanel uipanel;
	/**
	 * Function used to set a field list element.  The type of this function is func(D,F,int)=maybe_error(D).
	 */
	final private Object[] setFieldListElement;
	/**
	 * Index of the field list element being edited.
	 */
	private int rowIndex;
	/**
	 * The component with the {@code JTable} that uses an instance of this class to display and edit the table elements.
	 */
	final private AnyTypeFieldListEditor<D, F> supData;
	
	transient protected ChangeEvent changeEvent = null;
	/**
	 * Creates new form FieldListCellRendererPanel
	 */
	FieldListCellRendererEditorPanel (UIFrame frame, UIPanel uipanel, Object[] setFieldListElement, AnyTypeFieldListEditor<D, F> supData)
	{
		super (new DataReference<F> (frame), frame);
		this.initComponents ();
		this.uipanel = uipanel;
		this.setFieldListElement = setFieldListElement;
		this.rowIndex = -1;
		this.supData = supData;
		this.debug = true;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      setBorder(javax.swing.BorderFactory.createEtchedBorder());
   }// </editor-fold>//GEN-END:initComponents


   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables

	@Override
	public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
	{
		//System.out.println ("FieldListCellRendererPanel.getTableCellRendererComponent(): Rendering " + value);//DEBUG
		if (isSelected) {
			setBackground (table.getSelectionBackground ());
			setForeground (table.getSelectionForeground ());
		}
		else {
			setBackground (table.getBackground ());
			setForeground (table.getForeground ());
		}
		if (hasFocus) {
			setBorder (BorderFactory.createCompoundBorder (BorderFactory.createEtchedBorder(), BorderFactory.createEtchedBorder()));
		}
		else {
			setBorder (BorderFactory.createEmptyBorder ());
		}
		this.setData ((F) value);
		return this;
	}


	@Override
	public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column)
	{
		//System.out.println ("FieldListCellRendererPanel.getTableCellEditorComponent(): editing " + value);//DEBUG
		this.setOpaque (true);
		this.setBorder (BorderFactory.createCompoundBorder (BorderFactory.createEtchedBorder(), BorderFactory.createEtchedBorder()));
		if (isSelected) {
			this.setBackground (table.getSelectionBackground ());
			this.setForeground (table.getSelectionForeground ());
		}
		else {
			this.setBackground (table.getBackground ());
			this.setForeground (table.getForeground ());
		}
		this.rowIndex = row;
		this.setData ((F) value);
		return this;
	}

	@Override
	public Object getCellEditorValue ()
	{
		
		//System.out.println ("FieldListCellRendererPanel.getCellEditorValue() = " + this.data.value);//DEBUG
		return this.data.getValue ();
	}

	@Override
	public boolean isCellEditable (EventObject anEvent)
	{
		if (anEvent instanceof MouseEvent) {
			return ((MouseEvent)anEvent).getClickCount () > 1;
		}
		return false;
	}

	@Override
	public boolean shouldSelectCell (EventObject anEvent)
	{
		return true;
	}

	@Override
	public boolean stopCellEditing ()
	{
		for (ComponentPopulate cp : this.componentsPopulate) {
			if (!cp.commitValue ()) {
				return false;
			}
		}
		if (rowIndex == -1)
			throw new InternalError ("row index is -1");
		System.out.println ("FieldListCellRendererPanel.stopCellEditing () = ");//DEBUG
		SetFieldListElementFunc<D, F> func = new SetFieldListElementFunc<> (this.setFieldListElement);
		SetResult_1<D> mdata = func.apply (this.supData.data.parent.getValue (), this.data.getValue (), rowIndex + 1);
		boolean result = this.supData.data.parent.handle_setResult (mdata);
		if (result) {
			this.rowIndex = -1;
			fireEditingStopped ();
		}
		return result;
	}

	@Override
	public void cancelCellEditing ()
	{
		System.out.println ("FieldListCellRendererPanel.cancelCellEditing ()");//DEBUG
		this.rowIndex = -1;
		fireEditingCanceled ();
	}

	@Override
	public void addCellEditorListener (CellEditorListener l)
	{
		cellListenerList.add (CellEditorListener.class, l);
	}

	@Override
	public void removeCellEditorListener (CellEditorListener l)
	{
		cellListenerList.remove(CellEditorListener.class, l);
	}

	 /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is created lazily.
     *
     * @see EventListenerList
     */
	protected void fireEditingStopped ()
	{
		// Guaranteed to return a non-null array
		Object[] listeners = cellListenerList.getListenerList ();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners [i] == CellEditorListener.class) {
				// Lazily create the event:
				if (changeEvent == null)
					changeEvent = new ChangeEvent (this);
				((CellEditorListener) listeners[ i + 1]).editingStopped (changeEvent);
			}
		}
	}
    /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is created lazily.
     *
     * @see EventListenerList
     */
    protected void fireEditingCanceled() {
        // Guaranteed to return a non-null array
        Object[] listeners = cellListenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent (this);
                ((CellEditorListener)listeners[i+1]).editingCanceled (changeEvent);
            }
        }
    }

	@Override
	UIPanel getUIPanel ()
	{
		return this.uipanel;
	}

	@Override
	Key getKey ()
	{
		return this.supData.key;
	}

			
}
