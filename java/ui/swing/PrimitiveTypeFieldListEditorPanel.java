/*
 * FieldListEditorPanel.java
 *
 * Created on 20 de Dezembro de 2013, 14:11
 */

package ui.swing;

import javax.swing.DefaultListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import data.AbstractMercuryReference;
import data.MercuryReference;
import jmercury.list;

/**
 * A panel with a swing list that shows a list field of {@code data}.
 *
 * @author  Pedro Mariano
 */
final class PrimitiveTypeFieldListEditorPanel<D, F>
	extends AbstractFieldListEditorPanel<D, F>
	implements ComponentPopulate
{
	final private String fieldName;

	/**
	 * The list model used to show the values in {@code valuesList}.
	 */
	final private FieldList_ListModel fieldList_ListModel;
	/**
	 * The mercury type of the list elements.
	 */
	final private MercuryType mercuryType;
	/**
	 * Creates new form FieldListEditorPanel
	 */
	PrimitiveTypeFieldListEditorPanel (AbstractMercuryReference<D> data, UIFrame frame, String fieldName, Object[] getFunc, Object[] setFunc, F value, MercuryType mercuryType)
	{
		super (data, frame, getFunc, setFunc, null, null);
		this.fieldName = fieldName;
		this.fieldList_ListModel = new FieldList_ListModel ();
		this.mercuryType = mercuryType;
		initComponents ();
		this.newValueFormattedTextField.setValue (value);
	}
	
//	protected jmercury.list.List_1<T> applyGetFunc ()
//	{
//		return (jmercury.list.List_1<T>) super.applyGetFunc (this.getFunc);
//	}
//	
//	protected boolean applySetFunc (Object value)
//	{
//		return super.applySetFunc (this.setFunc, value);
//	}

	@Override
	public void valueChanged (MercuryReference data)
	{
		ListDataEvent lde;
		int size;
//		size = this.fieldList_ListModel.getSize ();
//		if (size > 0) {
//			System.out.println ("Removing from list model " + size);
//			lde = new ListDataEvent (this, ListDataEvent.INTERVAL_REMOVED, 0, size);
//			for (ListDataListener ldl : this.fieldList_ListModel.getListDataListeners ())  {
//				ldl.intervalRemoved (lde);
//			}
//		}
//		this.data.value = data;
		size = this.fieldList_ListModel.getSize ();
		if (size > 0) {
			System.out.println ("Adding to list model " + size);
			lde = new ListDataEvent (this, ListDataEvent.INTERVAL_ADDED, 0, size);
			for (ListDataListener ldl : this.fieldList_ListModel.getListDataListeners ())  {
				ldl.intervalAdded (lde);
			}
		}
	}
	@Override
	public boolean commitValue ()
	{
		return true;
	}

	private class FieldList_ListModel
		//extends javax.swing.AbstractListModel
		extends javax.swing.DefaultListModel
	{
		@Override
		public Object getElementAt (int index)
		{
			jmercury.list.List_1<F> list = PrimitiveTypeFieldListEditorPanel.this.data.getValue ();
			return jmercury.list.det_index0_2_f_0 (PrimitiveTypeFieldListEditorPanel.this.mercuryType.typeInfo_Struct, list, index);
		}
		@Override
		public int getSize ()
		{
			if (PrimitiveTypeFieldListEditorPanel.this.data.getValue () == null) {
				return 0;
			}
			else {
				jmercury.list.List_1<F> list = PrimitiveTypeFieldListEditorPanel.this.data.getValue ();
				return jmercury.list.length_1_f_0 (PrimitiveTypeFieldListEditorPanel.this.mercuryType.typeInfo_Struct, list);
			}
		}
	}
	/**
	 * Mercury types that can be edited by a {@code FieldListEditorPanel}
	 */
	static enum MercuryType
	{
		INT    (jmercury.runtime.TypeInfo_Struct.maybe_new (jmercury.builtin.builtin__type_ctor_info_int_0)),
		STRING (jmercury.runtime.TypeInfo_Struct.maybe_new (jmercury.builtin.builtin__type_ctor_info_string_0)),
		FLOAT  (jmercury.runtime.TypeInfo_Struct.maybe_new (jmercury.builtin.builtin__type_ctor_info_float_0));

		/**
		 * The mercury type info struct needed by mercury functions.
		 */
		jmercury.runtime.TypeInfo_Struct typeInfo_Struct;
		/**
		 * Initialises the type info of the mercury type represented by the enum.
		 */
		private MercuryType (jmercury.runtime.TypeInfo_Struct typeInfo_Struct)
		{
			this.typeInfo_Struct = typeInfo_Struct;
		}
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      valuesList = new javax.swing.JList();
      jPanel1 = new javax.swing.JPanel();
      fieldNameLabel = new javax.swing.JLabel();
      newValueFormattedTextField = new javax.swing.JFormattedTextField();
      addButton = new javax.swing.JButton();
      jPanel2 = new javax.swing.JPanel();
      delButton = new javax.swing.JButton();

      setBorder(javax.swing.BorderFactory.createEtchedBorder());
      setLayout(new java.awt.BorderLayout());

      valuesList.setModel(this.fieldList_ListModel);
      jScrollPane1.setViewportView(valuesList);

      add(jScrollPane1, java.awt.BorderLayout.CENTER);

      jPanel1.setLayout(new java.awt.BorderLayout());

      fieldNameLabel.setText(this.fieldName);
      jPanel1.add(fieldNameLabel, java.awt.BorderLayout.WEST);
      jPanel1.add(newValueFormattedTextField, java.awt.BorderLayout.CENTER);

      addButton.setText("+");
      addButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButtonActionPerformed(evt);
         }
      });
      jPanel1.add(addButton, java.awt.BorderLayout.EAST);

      add(jPanel1, java.awt.BorderLayout.NORTH);

      delButton.setText("-");
      delButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            delButtonActionPerformed(evt);
         }
      });
      jPanel2.add(delButton);

      add(jPanel2, java.awt.BorderLayout.EAST);
   }// </editor-fold>//GEN-END:initComponents

	private void delButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
		int[] selectedValues = this.valuesList.getSelectedIndices ();
		//jmercury.list.List_1<T> previousList = (jmercury.list.List_1<T>) this.applyGetFunc (this.getFunc).value;
		jmercury.list.List_1<F> previousList = this.data.getValue ();
		int i = 0, j = 0;
		jmercury.list.List_1<F> newList;
		newList = new jmercury.list.List_1.F_nil_0 ();
		jmercury.list.List_1.F_cons_2<F> insert, newInsert;
		insert = null;
		// build the new list of new items
		while (previousList instanceof jmercury.list.List_1.F_cons_2) {
			jmercury.list.List_1.F_cons_2<F> cons = (jmercury.list.List_1.F_cons_2) previousList;
			if (j < selectedValues.length && i == selectedValues [j]) {
				j++;
			}
			else {
				if (insert == null) {
					insert = new jmercury.list.List_1.F_cons_2<F> (cons.F1, null);
					newList = insert;
				}
				else {
					newInsert = new jmercury.list.List_1.F_cons_2<F> (cons.F1, null);
					insert.F2 = newInsert;
					insert = newInsert;
				}
			}
			previousList = cons.F2;
			i++;
		}
		if (insert != null) {
			// elements were inserted, so put nil constructor
			insert.F2 = new jmercury.list.List_1.F_nil_0 ();
		}
		// set the list field
		if (this.data.setValue (newList)) {
			while (j > 0) {
				j--;
				ListDataEvent lde;
				lde = new ListDataEvent (this, ListDataEvent.INTERVAL_ADDED, selectedValues [j], selectedValues [j] + 1);
				for (ListDataListener ldl : this.fieldList_ListModel.getListDataListeners ())  {
					ldl.intervalRemoved (lde);
				}
			}
		}
	}//GEN-LAST:event_delButtonActionPerformed

	private void addButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
//		jmercury.list.List_1<T> previousList = (jmercury.list.List_1<T>) this.applyGetFunc (this.getFunc);
		jmercury.list.List_1<F> previousList = this.data.getValue ();
		F newValue = (F) this.newValueFormattedTextField.getValue ();
		jmercury.list.List_1.F_cons_2<F> newList;
		newList = new jmercury.list.List_1.F_cons_2<F> (newValue, previousList);
		System.out.println ("Adding " + newValue + " to list"); // DEBUG
		if (this.data.setValue (newList)) {
			ListDataEvent lde;
			lde = new ListDataEvent (this, ListDataEvent.INTERVAL_ADDED, 0, 1);
			for (ListDataListener ldl : this.fieldList_ListModel.getListDataListeners ())  {
				ldl.intervalAdded (lde);
			}
		}
	}//GEN-LAST:event_addButtonActionPerformed
	
	
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addButton;
   private javax.swing.JButton delButton;
   private javax.swing.JLabel fieldNameLabel;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JFormattedTextField newValueFormattedTextField;
   private javax.swing.JList valuesList;
   // End of variables declaration//GEN-END:variables
	
}
