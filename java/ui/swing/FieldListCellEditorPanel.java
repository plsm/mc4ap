/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ui.swing;

import data.FieldReference;
import data.closure.GetFieldFunc;
import data.closure.SetFieldFunc;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.EventObject;
import javax.swing.JTable;
import javax.swing.event.CellEditorListener;
import javax.swing.table.TableCellEditor;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.EventListenerList;
import data.closure.SetFieldListElementFunc;
import jmercury.userInterface.SetResult_1;

/**
 * Comoponent responsible for editing the elements of a field list.
 * 
 * @author Pedro Mariano
 */
public class FieldListCellEditorPanel<D, F>
	extends DynamicDataPanel<FieldListCellEditorPanel<D, F>, F, DataReference<F> >
	implements
		TableCellEditor
{
	protected EventListenerList cellListenerList = new EventListenerList();
	/**
	 * 
	 */
	final private UIPanel uipanel;
	/**
	 * Function used to set a field list element.  The type of this function is func(D,F,int)=maybe_error(D).
	 */
	final private Object[] setFieldListElement;
	/**
	 * Index of the field list element being edited.
	 */
	private int rowIndex;
	/**
	 * The component with the {@code JTable} that uses an instance of this class to display and edit the table elements.
	 */
	AnyTypeFieldListEditor<D, F> supData;
	
	transient protected ChangeEvent changeEvent = null;
	/**
	 * Creates new form FieldListCellRendererPanel
	 */
	FieldListCellEditorPanel (UIFrame frame, UIPanel uipanel, Object[] setFieldListElement)
	{
		super (new DataReference<F> (frame), frame);
		this.initComponents ();
		this.uipanel = uipanel;
		this.setFieldListElement = setFieldListElement;
		this.rowIndex = -1;
		this.debug = true;
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      setBorder(javax.swing.BorderFactory.createEtchedBorder());
   }// </editor-fold>//GEN-END:initComponents


   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables



	@Override
	public Component getTableCellEditorComponent (JTable table, Object value, boolean isSelected, int row, int column)
	{
		//System.out.println ("FieldListCellRendererPanel.getTableCellEditorComponent(): editing " + value);//DEBUG
		this.setOpaque (true);
		this.setBorder (BorderFactory.createCompoundBorder (BorderFactory.createEtchedBorder(), BorderFactory.createEtchedBorder()));
		if (isSelected) {
			this.setBackground (table.getSelectionBackground ());
			this.setForeground (table.getSelectionForeground ());
		}
		else {
			this.setBackground (table.getBackground ());
			this.setForeground (table.getForeground ());
		}
		this.rowIndex = row;
		this.setData ((F) value);
		return this;
	}

	@Override
	public Object getCellEditorValue ()
	{
		
		//System.out.println ("FieldListCellRendererPanel.getCellEditorValue() = " + this.data.value);//DEBUG
		return this.data.getValue ();
	}

	@Override
	public boolean isCellEditable (EventObject anEvent)
	{
		if (anEvent instanceof MouseEvent) {
			return ((MouseEvent)anEvent).getClickCount () > 1;
		}
		return false;
	}

	@Override
	public boolean shouldSelectCell (EventObject anEvent)
	{
		return true;
	}

	@Override
	public boolean stopCellEditing ()
	{
		for (ComponentPopulate cp : this.componentsPopulate) {
			if (!cp.commitValue ()) {
				return false;
			}
		}
		if (rowIndex == -1)
			throw new InternalError ("row index is -1");
		System.out.println ("FieldListCellRendererPanel.stopCellEditing () = ");//DEBUG
		SetFieldListElementFunc<D, F> func = new SetFieldListElementFunc<> (this.setFieldListElement);
		SetResult_1<D> mdata = func.apply (this.supData.data.parent.getValue (), this.data.getValue (), rowIndex + 1);
		boolean result = this.supData.data.parent.handle_setResult (mdata);
		
//		jmercury.runtime.MethodPtr4 funcMeth = ((jmercury.runtime.MethodPtr4) this.setFieldListElement [1]);
//		jmercury.maybe.Maybe_error_2 mupdate =
//			(jmercury.maybe.Maybe_error_2) funcMeth.call___0_0 (
//				this.setFieldListElement,
//				this.supData.data.getValue (),
//				this.data.getValue (),
//				new Integer (this.rowIndex + 1));
//		boolean result = this.supData.handle_maybeError (mupdate);
		if (result) {
			this.rowIndex = -1;
			//this.data.value = null;
			fireEditingStopped ();
		}
		//System.out.println (result);//DEBUG
		return result;
	}

	@Override
	public void cancelCellEditing ()
	{
		System.out.println ("FieldListCellRendererPanel.cancelCellEditing ()");//DEBUG
		this.rowIndex = -1;
		//this.data.value = null;
		fireEditingCanceled ();
	}

	@Override
	public void addCellEditorListener (CellEditorListener l)
	{
		//System.out.println ("FieldListCellRendererPanel.addCellEditorListener (" + l + ")");//DEBUG
		cellListenerList.add (CellEditorListener.class, l);
	}

	@Override
	public void removeCellEditorListener (CellEditorListener l)
	{
		//System.out.println ("FieldListCellRendererPanel.removeCellEditorListener (" + l + ")");//DEBUG
		cellListenerList.remove(CellEditorListener.class, l);
	}

	 /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is created lazily.
     *
     * @see EventListenerList
     */
    protected void fireEditingStopped() {
        // Guaranteed to return a non-null array
        Object[] listeners = cellListenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent(this);
                ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
            }
        }
    }
    /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is created lazily.
     *
     * @see EventListenerList
     */
    protected void fireEditingCanceled() {
        // Guaranteed to return a non-null array
        Object[] listeners = cellListenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==CellEditorListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent (this);
                ((CellEditorListener)listeners[i+1]).editingCanceled (changeEvent);
            }
        }
    }

	@Override
	public FieldListCellEditorPanel handle_subdialog (JButton button, final UIPanel<F> childPanel)
	{
		//this.addComponent (button, true, true, true);
		this.addDynamicComponent (button);
		ActionListener action;
		action = new ActionListener () {
			@Override
			public void actionPerformed (ActionEvent evt)
			{
				childPanel.setData (FieldListCellEditorPanel.this.data.getValue ());
				NavigateAction action = new NavigateAction (FieldListCellEditorPanel.this.uipanel.key)
				{
					@Override
					public boolean perform ()
					{
						return
							childPanel.commitValue ()
							&& FieldListCellEditorPanel.this.setData (childPanel.data.getValue ());
					}
				};
				FieldListCellEditorPanel.this.frame.showPanel (childPanel.key, action);
			}
		};
		button.addActionListener (action);
		return this;
	}

	@Override
	public <SF> FieldListCellEditorPanel handle_editField (JButton button, final Object[] getFunc, final Object[] setFunc, final UIPanel<SF> childPanel)
	{
		//this.addComponent (button, true, true, true);
		
		this.addDynamicComponent (button);
		ActionListener action;
		action = new ActionListener () {
			GetFieldFunc<F, SF> getFieldFunc = new GetFieldFunc<> (getFunc);
			SetFieldFunc<F, SF> setFieldFunc = new SetFieldFunc<> (setFunc);
			@Override
			public void actionPerformed (java.awt.event.ActionEvent evt)
			{
				childPanel.setData (getFieldFunc.apply (FieldListCellEditorPanel.this.data.getValue ()));
				NavigateAction action = new NavigateAction (FieldListCellEditorPanel.this.uipanel.key) {
					@Override
					public boolean perform ()
					{
						if (!childPanel.commitValue ()) {
							return false;
						}
						SetResult_1<F> result = setFieldFunc.apply (FieldListCellEditorPanel.this.data.getValue (), childPanel.data.getValue ());
						return FieldListCellEditorPanel.this.data.handle_setResult (result);
					}
				};
				FieldListCellEditorPanel.this.frame.showPanel (childPanel.key, action);
			}
		};
		button.addActionListener (action);
		return this;
	}

	@Override
	UIPanel getUIPanel ()
	{
		return this.uipanel;
	}

			
}
