/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ui.swing;

import data.AbstractMercuryReference;

import ui.KeyGenerator;

import java.util.Vector;
import javax.swing.JRadioButton;

/**
 * A panel that presents a set of radio buttons.
 * @author pedro
 */
abstract public class AbstractSelectOneOfPanel<D1, D2>
	extends AbstractDataPanel<D1, AbstractMercuryReference<D1> >
	implements ComponentPopulate<D1>
{
	/**
	 * Empty panel key. Some radio buttons do not have any panel associated. When
	 * the user presses them or when the field corresponds to such radio button,
	 * an empty label is displayed.
	 */
	static protected String EMPTY = "empty";
	/**
	 * The panel that has been selected after pressing a radio button.
	 */
	protected InlinePanelField<D1, D2> selectedInlinePanel;
	/**
	 * A vector with radio buttons and the panels that they display.
	 */
	final protected Vector<ButtonPanelInfo> buttonPanelInfo;
	/**
	 * The {@code UIPanel} where this panel is located.
	 */
	final protected UIPanel<D1> parentPanel;
	/**
	 * Panel name.
	 */
	transient final private String panelName;
	/**
	 * Number of radio buttons inserted in this panel.
	 */
	transient protected int numberRadioButtons = 0;
	/**
	 * Key generator used to assign unique keys to the inline panels associated
	 * with radio buttons. When a radio button is clicked we need which panel
	 * should be shown.
	 */
	static protected KeyGenerator keyGenerator = new KeyGenerator ();
	/**
	 * 
	 * @param data
	 * @param frame
	 * @param parentPanel
	 * @param panelName
	 * @param funcSelectedChoice
	 * @param funcSetData 
	 */
	protected AbstractSelectOneOfPanel (AbstractMercuryReference<D1> data, UIFrame frame, UIPanel<D1> parentPanel, String panelName)
	{
		super (data, frame);
		this.panelName = panelName;
		this.parentPanel = parentPanel;
		initComponents ();
		this.buttonPanelInfo = new Vector<> (10, 10);
		this.selectedInlinePanel = null;
		
	}
	/**
	 * Construct an inline panel where swing components to edit this {@code UIPanel} Mercury data can be placed.  Inline panels are bordered panels that visually group swing components.
	 * @return 
	 */
	abstract public InlinePanelField<D1, D2> newInlinePanelForChoice ();
	abstract public AbstractSelectOneOfPanel<D1, D2> handle_choiceItem (JRadioButton button, final Object[] selectChoiceFunc);
	abstract public AbstractSelectOneOfPanel<D1, D2> handle_choiceItem (JRadioButton button, final Object[] selectChoiceFunc, final InlinePanelField<D1, D2> panel);
	


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup = new javax.swing.ButtonGroup();
      radioButtonsPanel = new javax.swing.JPanel();
      dialogsPanel = new javax.swing.JPanel();
      emptyLabel = new javax.swing.JLabel();

      setBorder(javax.swing.BorderFactory.createTitledBorder(this.panelName));
      setLayout(new java.awt.BorderLayout());

      radioButtonsPanel.setLayout(new javax.swing.BoxLayout(radioButtonsPanel, javax.swing.BoxLayout.Y_AXIS));
      add(radioButtonsPanel, java.awt.BorderLayout.WEST);

      dialogsPanel.setLayout(new java.awt.CardLayout());
      dialogsPanel.add(emptyLabel, "empty");

      add(dialogsPanel, java.awt.BorderLayout.CENTER);
   }// </editor-fold>//GEN-END:initComponents


   // Variables declaration - do not modify//GEN-BEGIN:variables
   protected javax.swing.ButtonGroup buttonGroup;
   protected javax.swing.JPanel dialogsPanel;
   private javax.swing.JLabel emptyLabel;
   protected javax.swing.JPanel radioButtonsPanel;
   // End of variables declaration//GEN-END:variables



	@Override
	public boolean commitValue ()
	{
		return this.selectedInlinePanel.commitValue ();
	}

	/**
	 * Holds information about a radio button, optionally its associated inline panel and its key.  When a radio button is clicked we need to show its associated inline panel if it exists.  Otherwise, we show an empty label.
	 */
	protected class ButtonPanelInfo
	{
		/**
		 * The radio button.
		 */
		final JRadioButton button;
		final InlinePanelField<D1, D2> panel;
		/**
		 * The inline panel key.
		 */
		final String key;
		ButtonPanelInfo (JRadioButton button)
		{
			this (button, null, null);
		}
		ButtonPanelInfo (JRadioButton button, InlinePanelField<D1, D2> panel, String key)
		{
			this.panel = panel;
			this.button = button;
			this.key = key;
		}
	}
}
